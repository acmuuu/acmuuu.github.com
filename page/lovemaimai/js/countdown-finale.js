/**
 * @preserve Homepage countdown finale experience.
 * This file includes all functionality to render the countdown
 * finale. Depends on Tween.js, Three.js libraries and base.js.
 *
 * Vendor provided code. Compressed file for the live site,
 * this raw script at http://closure-compiler.appspot.com/ using the
 * default, "simple," optimization setting.
 *
 * @author mking@mking.me (Matt King)
 */

/**
 * Color palette used in shapes. Three.js requires colors to be in decimal form.
 */
var colors = [0x265897, 0x13acfa, 0x009a49, 0xc0000b, 0xa1cb50, 0xB11B23,
              0xFDD901, 0x222222, 0xE44D26, 0x70A3D6, 0x9DC3E6, 0xAAAAAA,
              0xCCCCCC, 0xEEEEEE];

/**
 * Encoded entity positions generated by the countdown builder.
 * Includes information about the grid size and increments, which allows for
 * larger or smaller grids per shape.
 */

/**
 * We use Math.PI * 2 a lot when drawing the dots, so we store it here.
 */
var PI2 = Math.PI * 2;

/**
 * Class CountdownMaterial
 * A wrapper around the Three.js ParticleCanvasMaterial.
 * @param {Object} opts Settings for CountdownMaterial.
 * @param {Object} opts.color color value for material.
 * @param {Function} opts.program function used to draw material.
 */
function CountdownMaterial(opts) {
  this.color = opts.color;
  if (opts.program) {
    this.program = opts.program;
  }
  this.material = new THREE.ParticleCanvasMaterial({
    color: this.color,
    program: this.program
  });
}

/**
 * Default function used to draw a dot.
 * @param {Object} ctx Canvas context to draw on.
 */
CountdownMaterial.prototype.program = function(ctx) {
  ctx.beginPath();
  ctx.arc(0, 0, 1, 0, PI2, true);
  ctx.closePath();
  ctx.fill();
};

/**
 * Class CountdownParticle
 * A wrapper around the Three.js Particle.
 * @param {Object} opts Settings for CountdownParticle.
 * @param {THREE.ParticleCanvasMaterial} opts.material material used
 *     in the THREE.Particle
 * @param {Number} opts.x Positional x value.
 * @param {Number} opts.y Positional y value.
 * @param {Number} opts.z Positional z value.
 * @param {Number} opts.scale Scale of the particle.
 * @param {Number} opts.delay Delay at which the Tween starts when
 *     the splode function is called.
 */
function CountdownParticle(opts) {
  for (k in opts) {
    this[k] = opts[k];
  }
  this.z = (opts.z || 0);
  this.material = opts.material;
  this.particle = new THREE.Particle(this.material);
  this.particle.position.x = (opts.x || 0);
  this.particle.position.y = (opts.y || 0);
  this.particle.position.z = (opts.z || 0);
  this.particle.scale.x = this.particle.scale.y = (opts.scale || 1);
  this.delay = (opts.delay || 0);
}

/**
 * Change the position of the Particle by using the TWEEN library.
 * Generates a random x, y and z position and fires off a call
 * to the TWEEN.Tween function. On complete, it fires off the
 * afterSplode function on the entity if it hasn't been called already.
 */
CountdownParticle.prototype.splode = function() {
  var self = this;
  var splodeTo = {x: (Math.random() * 2500) - 1250,
                  y: (Math.random() * 2500) - 1250,
                  z: (Math.random() * 6500) - 5500};
  new TWEEN.Tween(this.particle.position)
    .delay(this.delay)
    .to(splodeTo, 2000)
    .easing(TWEEN.Easing.Exponential.EaseOut)
    .onComplete(function() {
      if (self.particle.position.z < -2000) {
        self.exit.call(self);
      }
      if (!self.entity.calledAfterSplode) {
        self.entity.afterSplode.call(self);
        self.entity.calledAfterSplode = true;
      }
    }).start();
};

/**
 * Change the position of the Particle by using the TWEEN library.
 * Resets the Particle back to it's origin x, y, and z coordinates.
 */
CountdownParticle.prototype.implode = function() {
  new TWEEN.Tween(this.particle.position)
    .delay(Math.random()*300)
    .to({x: this.originX, y: this.originY, z: this.originZ}, 1000)
    .easing(TWEEN.Easing.Circular.EaseOut)
    .start();
};

/**
 * Make the Particle exit the scene using the TWEEN library.
 * Adds to the z position value, then on complete, reduces the
 * associated entity's particle count and fires off the
 * entity's afterExit callback once the particle count reaches zero.
 */
CountdownParticle.prototype.exit = function() {
  var self = this;
  new TWEEN.Tween(this.particle.scale)
    .delay(this.delay)
    .to({x: 0, y: 0}, 1000)
    .easing(TWEEN.Easing.Circular.EaseIn)
    .onComplete(function() {
      self.entity.group.removeChild(self.particle);
      self.entity.particleLength--;
      if (self.entity.particleLength === 0) {
        self.entity.afterExit();
      }
    }).start();
};

/**
 * Class CountdownEntity
 * Manages state of a countdown shape, holding references
 * to CountdownMaterials and CountdownParticles.
 * Calls the build function on initialization.
 * @param {Object} opts Settings for CountdownEntity.
 * @param {Boolean} opts.first If set to true, will render
 *     the entity in it's formed state instead of the implosion
 *     transition.
 * @param {THREE.Object3D} opts.group Group of Three.js objects to
 *     manipulate.
 * @param {Object} opts.entity The positional coordinates
 *     which to place particles at.
 * @param {Function} opts.afterSplode callback to run after the splode
 *     function is complete
 * @param {Function} opts.afterExit callback to run after the exit
 *     function is complete
 */
function CountdownEntity(opts) {
  this.first = opts.first;
  this.group = opts.group;
  this.entity = opts.entity;
  this.materials = [];
  this.particles = [];
  this.particleLength = 0;
  this.afterSplode = (opts.afterSplode || function() {});
  this.afterExit = (opts.afterExit || function() {});
  this.build();
}

/**
 * Add a CountdownParticle to the particles list.
 * Also sets the associated entity of the particle
 * so it can reference callbacks.
 * Adds the CountdownParticle's THREE.Particle to the
 * group so Three.js can render it.
 */
CountdownEntity.prototype.addParticle = function(p) {
  this.particles.push(p);
  p.entity = this;
  this.group.addChild(p.particle);
  this.particleLength++;
};

/**
 * Run through each particle in the particles list
 * and call the splode function on it.
 */
CountdownEntity.prototype.splode = function() {
  for (var i = 0; i < this.particleLength; i++) {
    this.particles[i].splode();
  }
};

/**
 * Run through each particle in the particles list
 * and call the implode function on it.
 */
CountdownEntity.prototype.implode = function() {
  for (var i = 0; i < this.particleLength; i++) {
    this.particles[i].implode();
  }
};

/**
 * Run through each particle in the particles list
 * and call the exit function on it.
 */
CountdownEntity.prototype.exit = function() {
  for (var i = 0; i < this.particleLength; i++) {
    this.particles[i].exit.call(this.particles[i]);
  }
};

/**
 * Takes the entity object and runs through it adding
 * CountdownParticles from the values.
 * Will randomly set the current x, y and z values of the particle
 * unless the first attribute is true, which will make it use the
 * particle's intended coordinates that form the shape.
 * Calls implode to start the transition to form the shape.
 */
CountdownEntity.prototype.build = function() {
  this.gridSize = this.entity.grid.incr * this.entity.grid.size;
  for (var i = 0; i < colors.length; i++) {
    this.materials.push(new CountdownMaterial({ color: colors[i] }));
  }
  for (var i = 0; i < this.entity.dots.length; i++) {
    var vals = this.entity.dots[i];
    var x = parseInt(vals[0], 10);
    var y = parseInt(vals[1], 10);
    var c = parseInt(vals[2], 10);
    if (this.first) {
      var temp = {x: (x * this.entity.grid.incr) - this.gridSize / 2,
                  y: ((y * this.entity.grid.incr) * -1) + this.gridSize / 2,
                  z: 0};
    } else {
      var temp = {x: (Math.random() * 2500) - 1250,
                  y: (Math.random() * 2500) - 1250,
                  z: (Math.random() * 3000) - 1500};
    }
    this.addParticle(new CountdownParticle({
      originX: (x * this.entity.grid.incr) - this.gridSize / 2,
      originY: ((y * this.entity.grid.incr) * -1) + this.gridSize / 2,
      originZ: 0,
      x: temp.x,
      y: temp.y,
      z: temp.z,
      scale: 7,
      material: this.materials[c].material,
      delay: 0,
      entity: this
    }));
  }
  this.implode();
};

/**
 * Wrapper around control functions that run the transitions.
 */
var countdownFinale = (function() {

  /**
   * Store if we've initialized or not. Used when creating a
   * CountdownEntity to determine if it's the first one, which
   * forces it to draw it's shape without imploding.
   */
  var initialized = false;

  /**
   * Variable to hold the swap timeout, in case someone clicks
   * we clear the timeout for the next splode.
   */
  var swapTimeout;

  /**
   * Variables used for DOM elements.
   */
  var container, stats, debug;

  /**
   * Variables used for Three.js scene.
   */
  var camera, scene, renderer;

  /**
   * Variables used to track mouse movement, used to adjust
   * camera and rotation values of the Three.js scene.
   */
  var mouseX = 0, mouseY = 0, mouseXOnMouseDown = 0;
  var targetRotationOnMouseDown = 0, targetRotation = 0;

  /**
   * Store the center X and Y of the window. Used when adjusting
   * the camera and rotation to make it appear to use the center of
   * the window as the point of reference.
   */
  var windowHalfX = window.innerWidth / 2;
  var windowHalfY = window.innerHeight / 2;

  /**
   * To simulate camera easing, the factor to multiply the camera
   * position when the mouse is moved.
   */
  var positionAdjustment = 0.02;
  var mouseAdjustment = 1;

  /**
   * Variables to track entity coordinate objects.
   */
  var entities = [], currentEntityDesign = 0;

  /**
   * Called in a loop using requestAnimationFrame, then calling
   * the render function and updating the stats area.
   */
  function animate() {
    requestAnimationFrame(animate);
    render();
    if (stats) {
      stats.update();
    }
  }

  /**
   * Update the scene, adjusting the camera, updating any TWEEN transitions,
   * and render the scene as it's currently set up.
   */
  function render() {
    TWEEN.update();
    camera.position.x += ( mouseX - camera.position.x ) * positionAdjustment;
    camera.position.y += ( - mouseY - camera.position.y ) * positionAdjustment;
    renderer.render(scene, camera);
  }

  /**
   * Track the mouse movements and adjust mouseX and mouseY, in turn
   * updating the camera angle when render is called.
   * @param {Event} e
   */
  function onDocumentMouseMove(e) {
    mouseX = (e.clientX - windowHalfX) / mouseAdjustment;
    mouseY = (e.clientY - windowHalfY) / mouseAdjustment;
  }

  /**
   * Allow the user to rotate and adjust camera zoom with arrow keys.
   * Will call splodeEntity when enter key is pressed.
   * @param {Event} e
   */
  function onDocumentKeyDown(e) {
    switch (e.keyCode) {
     case 37:
      targetRotation -= 0.05;
      break;
     case 38:
      camera.position.z -= 1;
      break;
     case 39:
      targetRotation += 0.05;
      break;
     case 40:
      camera.position.z += 1;
      break;
     case 13:
      onDocumentClick();
      break;
     case 67:
      camera.position.x -= 1;
      break;
     case 85:
      camera.position.y -= 1;
      break;
     case 88:
      camera.position.x += 1;
      break;
     case 89:
      camera.position.y += 1;
      break;
    default:
      break;
    }
  }

  /**
   * Call splodeEntity if the user clicks anywhere on the window.
   * @param {Event} e
   */
  function onDocumentClick(e) {
    if (swapTimeout) {
      swapTimeout.stop();
      entities[0].exit();
    }
    splodeEntity();
  }

  /**
   * Generate a new Three.Object3D, and attach a new CountdownEntity
   * to it. Push the new entity onto the list of entities so we can
   * process them further. Adds group to the Three.js scene.
   * Sets afterSplode callback to the swapEntity function, and afterExit
   * to the removeEntity function.
   */
  function showEntity() {
    var group = new THREE.Object3D();
    var e = new CountdownEntity({
      group: group,
      entity: entityDesigns[currentEntityDesign],
      afterSplode: swapEntity,
      afterExit: removeEntity,
      first: !initialized
    });
    entities.push(e);
    scene.addObject(e.group);
    initialized = true;
  }

  /**
   * Call the splode function on the last item in the entities list.
   */
  function splodeEntity() {
    new TWEEN.Tween(camera.position)
      .delay(0)
      .to({x: camera.position.x+((Math.random()*1200)-600),
           y: camera.position.y+((Math.random()*1200)-600),
           z: camera.position.z-((Math.random()*100)-50)}, 400)
      .easing(TWEEN.Easing.Circular.EaseIn).start();
    entities[entities.length-1].splode();
  }

  /**
   * Take the first entity in the entities list out and remove it
   * from the scene, only if there are two items in the list.
   * Effectively keeps only two shapes on the scene at a time.
   */
  function removeEntity() {
    if (entities.length == 2) {
      var oldGroup = entities.shift();
      scene.removeObject(oldGroup.group);
      oldGroup = null;
    }
  }

  /**
   * Make the first item in the entities list exit, point to the next
   * entity in the entityDesigns list, then call showEntity to transition
   * the new shape in.
   */
  var direction = -1;
  function swapEntity() {
    currentEntityDesign++;
    showEntity();
    if (currentEntityDesign + 1 != entityDesigns.length) {
      if (camera.position.z < 800) {
        direction = 1;
      } else if (camera.position.z > 1000) {
        direction = -1;
      }
      swapTimeout = new TWEEN.Tween(camera.position)
        .to({z: camera.position.z+(200*direction)}, 4000)
        .onComplete(function() {
          entities[0].exit();
          splodeEntity();
        }).easing(TWEEN.Easing.Circular.EaseIn).start();
    }
    if (currentEntityDesign + 1 == entityDesigns.length) {
      var prog = function(c) {
	  /*
        c.save();c.fillStyle="#898989";c.strokeStyle='#898989';c.globalAlpha=1.0;c.lineWidth="0";c.lineCap="butt";c.lineJoin="round";c.mitterLimit="1";c.beginPath();c.moveTo(119.82400,221.75600);c.bezierCurveTo(119.62100,220.99001,119.42900,220.17400,119.25000,219.30701);c.bezierCurveTo(119.25000,219.30701,118.90200,217.58400,118.74600,216.74100);c.bezierCurveTo(118.74600,216.74100,118.45300,215.09300,118.33600,214.32700);c.bezierCurveTo(118.33600,214.32700,118.12100,212.88901,118.04300,212.31100);c.bezierCurveTo(117.96500,212.90500,117.87100,213.55701,117.76200,214.26801);c.bezierCurveTo(117.76200,214.26801,117.53200,215.71700,117.39900,216.48300);c.bezierCurveTo(117.39900,216.48300,117.12200,218.01801,116.96500,218.79201);c.bezierCurveTo(116.96500,218.79201,116.63700,220.31200,116.44900,221.03000);c.lineTo(111.22200,241.86600);c.lineTo(106.60500,241.86600);c.lineTo(115.65200,207.60001);c.lineTo(120.05800,207.60001);c.lineTo(125.73000,229.44400);c.bezierCurveTo(125.94900,230.28799,126.15600,231.14700,126.35100,232.02200);c.bezierCurveTo(126.35100,232.02200,126.72200,233.70200,126.87800,234.43600);c.bezierCurveTo(127.05000,235.29500,127.22200,236.12399,127.39400,236.92000);c.bezierCurveTo(127.56600,236.10800,127.74600,235.27200,127.93300,234.41200);c.bezierCurveTo(128.10500,233.67799,128.29201,232.88901,128.49500,232.04500);c.bezierCurveTo(128.49500,232.04500,128.90900,230.38100,129.12801,229.58400);c.lineTo(135.08099,207.60001);c.lineTo(139.48700,207.60001);c.lineTo(148.08900,241.86600);c.lineTo(143.42500,241.86600);c.lineTo(138.73700,221.19400);c.bezierCurveTo(138.56500,220.42799,138.40500,219.64301,138.25700,218.83900);c.bezierCurveTo(138.25700,218.83900,137.97200,217.24500,137.84700,216.47200);c.bezierCurveTo(137.84700,216.47200,137.61301,214.96001,137.51900,214.25700);c.bezierCurveTo(137.51900,214.25700,137.34700,212.90500,137.28500,212.31200);c.bezierCurveTo(137.19099,212.90601,137.07001,213.57001,136.92200,214.30400);c.bezierCurveTo(136.92200,214.30400,136.60201,215.81599,136.40601,216.63600);c.bezierCurveTo(136.40601,216.63600,136.00000,218.30400,135.77299,219.17900);c.bezierCurveTo(135.77299,219.17900,135.31599,220.92900,135.08200,221.80400);c.lineTo(129.71500,241.86600);c.lineTo(125.09800,241.86600);c.lineTo(119.82400,221.75600);c.closePath();c.fill();c.stroke();c.beginPath();c.moveTo(169.25400,207.60001);c.lineTo(169.25400,225.22501);c.bezierCurveTo(169.25400,226.75600,169.06599,228.06100,168.69200,229.13901);c.bezierCurveTo(168.69200,229.13901,167.75101,231.10400,166.99300,231.79900);c.bezierCurveTo(166.99300,231.79900,165.27400,233.00200,164.11000,233.32201);c.bezierCurveTo(164.11000,233.32201,161.56700,233.80200,159.97301,233.80200);c.bezierCurveTo(158.41100,233.80200,156.91800,233.58299,155.49600,233.14600);c.bezierCurveTo(155.49600,233.14600,152.78500,232.17700,151.62900,231.55200);c.lineTo(153.12900,228.34100);c.bezierCurveTo(154.16000,228.87199,155.23399,229.32500,156.35201,229.70000);c.bezierCurveTo(156.35201,229.70000,158.67599,230.26199,159.97301,230.26199);c.bezierCurveTo(160.78500,230.26199,161.50800,230.16800,162.14101,229.98100);c.bezierCurveTo(162.14101,229.98100,163.30499,229.48500,163.73500,229.05499);c.bezierCurveTo(163.73500,229.05499,164.49300,228.05901,164.71899,227.35600);c.bezierCurveTo(164.71899,227.35600,165.05901,225.77800,165.05901,224.73100);c.lineTo(165.05901,223.11400);c.lineTo(160.74699,222.95000);c.bezierCurveTo(157.05901,222.82500,154.31300,222.07500,152.50900,220.70000);c.bezierCurveTo(152.50900,220.70000,149.80200,217.35600,149.80200,214.79401);c.bezierCurveTo(149.80200,213.48199,149.99001,212.34500,150.36400,211.38400);c.bezierCurveTo(150.36400,211.38400,151.25900,209.62601,151.92300,208.99300);c.bezierCurveTo(151.92300,208.99300,153.37199,207.89101,154.27800,207.58701);c.bezierCurveTo(154.27800,207.58701,156.17599,207.13000,157.25500,207.13000);c.bezierCurveTo(158.23900,207.13000,159.10699,207.20799,159.85699,207.36400);c.bezierCurveTo(159.85699,207.36400,161.28700,207.76199,161.89600,208.09100);c.bezierCurveTo(161.89600,208.09100,163.06799,208.83701,163.58400,209.34500);c.bezierCurveTo(163.58400,209.34500,164.61501,210.45799,165.13100,211.16100);c.lineTo(165.31900,211.16100);c.lineTo(166.18600,207.59900);c.lineTo(169.25400,207.59900);c.closePath();c.moveTo(155.36700,211.58400);c.bezierCurveTo(154.60899,212.25600,154.23000,213.31100,154.23000,214.74800);c.bezierCurveTo(154.23000,215.54500,154.35500,216.25999,154.60500,216.89301);c.bezierCurveTo(154.60500,216.89301,155.26500,218.06500,155.83501,218.50999);c.bezierCurveTo(155.83501,218.50999,157.16701,219.30299,158.12000,219.55299);c.bezierCurveTo(158.12000,219.55299,160.25301,219.95900,161.65900,220.02200);c.lineTo(165.01100,220.18600);c.lineTo(165.01100,217.86600);c.bezierCurveTo(165.01100,216.63200,164.84300,215.55701,164.50700,214.64301);c.bezierCurveTo(164.50700,214.64301,163.70599,212.97099,163.11200,212.37000);c.bezierCurveTo(163.11200,212.37000,161.81500,211.31900,161.00301,211.02200);c.bezierCurveTo(161.00301,211.02200,159.30800,210.57700,158.35500,210.57700);c.bezierCurveTo(157.12100,210.57600,156.12500,210.91200,155.36700,211.58400);c.closePath();c.fill();c.stroke();c.beginPath();c.moveTo(182.50800,211.77100);c.bezierCurveTo(182.01601,212.53700,181.77000,213.67700,181.77000,215.19299);c.lineTo(181.77000,230.12300);c.lineTo(188.23900,230.12300);c.lineTo(188.23900,233.33400);c.lineTo(181.77000,233.33400);c.lineTo(181.77000,239.24001);c.lineTo(179.30901,239.24001);c.lineTo(177.48100,233.84900);c.lineTo(173.84801,232.02100);c.lineTo(173.84801,230.12300);c.lineTo(177.48100,230.12300);c.lineTo(177.48100,215.19299);c.bezierCurveTo(177.48100,213.61501,177.65300,212.30600,177.99699,211.26700);c.bezierCurveTo(177.99699,211.26700,178.81300,209.40401,179.41499,208.79401);c.bezierCurveTo(179.41499,208.79401,180.73100,207.75500,181.56000,207.50500);c.bezierCurveTo(181.56000,207.50500,183.28700,207.13000,184.25500,207.13000);c.bezierCurveTo(184.64600,207.13000,185.04401,207.14999,185.45000,207.18900);c.bezierCurveTo(185.45000,207.18900,186.24699,207.28300,186.62199,207.35300);c.bezierCurveTo(186.62199,207.35300,187.34100,207.50500,187.65300,207.59900);c.bezierCurveTo(187.65300,207.59900,188.22301,207.78700,188.42599,207.88000);c.lineTo(188.42599,211.11400);c.bezierCurveTo(188.28500,211.06700,188.07800,211.01199,187.80499,210.95000);c.bezierCurveTo(187.80499,210.95000,187.23100,210.83299,186.90300,210.78600);c.bezierCurveTo(186.90300,210.78600,186.23500,210.70000,185.88300,210.66901);c.bezierCurveTo(185.88300,210.66901,185.21500,210.62199,184.93401,210.62199);c.bezierCurveTo(183.80901,210.62300,183.00000,211.00600,182.50800,211.77100);c.closePath();c.fill();c.stroke();c.beginPath();c.moveTo(206.78900,207.48199);c.bezierCurveTo(207.75000,207.71600,208.65199,208.06000,209.49600,208.51300);c.lineTo(209.49600,212.31000);c.bezierCurveTo(208.65199,211.91901,207.71899,211.58000,206.69501,211.28999);c.bezierCurveTo(206.69501,211.28999,204.52699,210.85600,203.26100,210.85600);c.bezierCurveTo(200.94901,210.85600,199.22600,211.61800,198.09300,213.14101);c.bezierCurveTo(198.09300,213.14101,196.39400,217.07500,196.39400,220.37100);c.bezierCurveTo(196.39400,223.68300,196.95599,226.12500,198.08200,227.69501);c.bezierCurveTo(198.08200,227.69501,200.99600,230.05000,203.44901,230.05000);c.bezierCurveTo(203.85500,230.05000,204.28500,230.01500,204.73801,229.94501);c.bezierCurveTo(204.73801,229.94501,205.65199,229.78101,206.12100,229.66400);c.bezierCurveTo(206.12100,229.66400,207.04300,229.41400,207.48000,229.26601);c.bezierCurveTo(207.48000,229.26601,208.31599,228.96500,208.67500,228.80901);c.lineTo(209.94099,232.41800);c.bezierCurveTo(209.16000,232.80901,208.18700,233.13699,207.02299,233.40199);c.bezierCurveTo(207.02299,233.40199,204.66800,233.80000,203.44901,233.80000);c.bezierCurveTo(201.85500,233.80000,200.36301,233.55800,198.97200,233.07300);c.bezierCurveTo(198.97200,233.07300,196.36700,231.81100,195.32700,230.74100);c.bezierCurveTo(195.32700,230.74100,193.47200,228.28000,192.87801,226.56900);c.bezierCurveTo(192.87801,226.56900,191.98700,222.77600,191.98700,220.32300);c.bezierCurveTo(191.98700,217.97900,192.27600,215.97501,192.85400,214.31100);c.bezierCurveTo(192.85400,214.31100,194.22900,211.28000,195.24500,210.20900);c.bezierCurveTo(195.24500,210.20900,197.45599,208.35699,198.83099,207.86501);c.bezierCurveTo(198.83099,207.86501,201.68300,207.12700,203.26100,207.12700);c.bezierCurveTo(204.65199,207.13100,205.82800,207.24800,206.78900,207.48199);c.closePath();c.fill();c.stroke();c.beginPath();c.moveTo(235.98000,207.60001);c.lineTo(235.98000,224.40500);c.bezierCurveTo(235.98000,227.68600,235.25700,230.07300,233.81200,231.56500);c.bezierCurveTo(233.81200,231.56500,230.21400,233.80299,227.35500,233.80299);c.bezierCurveTo(226.60500,233.80299,225.87100,233.72501,225.15199,233.56900);c.bezierCurveTo(225.15199,233.56900,223.75400,233.17101,223.11301,232.84200);c.bezierCurveTo(223.11301,232.84200,221.88300,232.10400,221.34300,231.61200);c.bezierCurveTo(221.34300,231.61200,220.33900,230.53799,219.94800,229.86600);c.lineTo(219.71400,229.86600);c.lineTo(219.90199,233.24100);c.lineTo(219.90199,244.06900);c.lineTo(215.63600,244.06900);c.lineTo(215.63600,207.60001);c.lineTo(219.90199,207.60001);c.lineTo(219.90199,220.93600);c.bezierCurveTo(219.90199,222.43600,220.01500,223.76401,220.24200,224.92000);c.bezierCurveTo(220.24200,224.92000,220.84399,227.05299,221.36700,227.85001);c.bezierCurveTo(221.36700,227.85001,222.58200,229.24800,223.44099,229.65500);c.bezierCurveTo(223.44099,229.65500,225.36301,230.26401,226.62900,230.26401);c.bezierCurveTo(228.37900,230.26401,229.66400,229.75600,230.48399,228.74100);c.bezierCurveTo(230.48399,228.74100,231.71400,226.20200,231.71400,224.17101);c.lineTo(231.71400,207.60001);c.lineTo(235.98000,207.60001);c.closePath();c.fill();c.stroke();c.beginPath();c.moveTo(261.72699,211.77100);c.bezierCurveTo(261.23499,212.53700,260.98901,213.67700,260.98901,215.19299);c.lineTo(260.98901,230.12300);c.lineTo(267.45801,230.12300);c.lineTo(267.45801,233.33400);c.lineTo(260.98901,233.33400);c.lineTo(260.98901,239.24001);c.lineTo(258.52802,239.24001);c.lineTo(256.70001,233.84900);c.lineTo(253.06700,232.02100);c.lineTo(253.06700,230.12300);c.lineTo(256.70001,230.12300);c.lineTo(256.70001,215.19299);c.bezierCurveTo(256.70001,213.61501,256.87201,212.30600,257.21600,211.26700);c.bezierCurveTo(257.21600,211.26700,258.03201,209.40401,258.63400,208.79401);c.bezierCurveTo(258.63400,208.79401,259.95001,207.75500,260.77899,207.50500);c.bezierCurveTo(260.77899,207.50500,262.50601,207.13000,263.47400,207.13000);c.bezierCurveTo(263.86499,207.13000,264.26300,207.14999,264.66901,207.18900);c.bezierCurveTo(264.66901,207.18900,265.46600,207.28300,265.84100,207.35300);c.bezierCurveTo(265.84100,207.35300,266.56000,207.50500,266.87201,207.59900);c.bezierCurveTo(266.87201,207.59900,267.44199,207.78700,267.64499,207.88000);c.lineTo(267.64499,211.11400);c.bezierCurveTo(267.50400,211.06700,267.29700,211.01199,267.02399,210.95000);c.bezierCurveTo(267.02399,210.95000,266.45001,210.83299,266.12201,210.78600);c.bezierCurveTo(266.12201,210.78600,265.45401,210.70000,265.10199,210.66901);c.bezierCurveTo(265.10199,210.66901,264.43399,210.62199,264.15302,210.62199);c.bezierCurveTo(263.02701,210.62300,262.21899,211.00600,261.72699,211.77100);c.closePath();c.fill();c.stroke();c.beginPath();c.moveTo(292.98001,207.60001);c.lineTo(292.98001,224.40500);c.bezierCurveTo(292.98001,227.68600,292.25699,230.07300,290.81201,231.56500);c.bezierCurveTo(290.81201,231.56500,287.21399,233.80299,284.35501,233.80299);c.bezierCurveTo(283.60501,233.80299,282.87100,233.72501,282.15201,233.56900);c.bezierCurveTo(282.15201,233.56900,280.75400,233.17101,280.11301,232.84200);c.bezierCurveTo(280.11301,232.84200,278.88300,232.10400,278.34299,231.61200);c.bezierCurveTo(278.34299,231.61200,277.33899,230.53799,276.94800,229.86600);c.lineTo(276.71399,229.86600);c.lineTo(276.90201,233.24100);c.lineTo(276.90201,244.06900);c.lineTo(272.63599,244.06900);c.lineTo(272.63599,207.60001);c.lineTo(276.90201,207.60001);c.lineTo(276.90201,220.93600);c.bezierCurveTo(276.90201,222.43600,277.01501,223.76401,277.24200,224.92000);c.bezierCurveTo(277.24200,224.92000,277.84399,227.05299,278.36700,227.85001);c.bezierCurveTo(278.36700,227.85001,279.58200,229.24800,280.44101,229.65500);c.bezierCurveTo(280.44101,229.65500,282.36301,230.26401,283.62900,230.26401);c.bezierCurveTo(285.37900,230.26401,286.66400,229.75600,287.48401,228.74100);c.bezierCurveTo(287.48401,228.74100,288.71399,226.20200,288.71399,224.17101);c.lineTo(288.71399,207.60001);c.lineTo(292.98001,207.60001);c.closePath();c.fill();c.stroke();c.beginPath();c.moveTo(313.28900,207.22501);c.bezierCurveTo(313.96899,207.28700,314.62500,207.38901,315.25800,207.53000);c.bezierCurveTo(315.25800,207.53000,316.50800,207.85001,317.10999,208.06900);c.bezierCurveTo(317.10999,208.06900,318.32501,208.54601,318.95001,208.84200);c.lineTo(318.95001,212.63901);c.bezierCurveTo(318.34100,212.35800,317.73901,212.10400,317.14499,211.87700);c.bezierCurveTo(317.14499,211.87700,315.93799,211.46300,315.30499,211.31500);c.bezierCurveTo(315.30499,211.31500,314.01599,211.05299,313.33600,210.97501);c.bezierCurveTo(313.33600,210.97501,311.91800,210.85800,311.12100,210.85800);c.bezierCurveTo(308.76199,210.85800,306.98401,211.56900,305.78900,212.99100);c.bezierCurveTo(305.78900,212.99100,303.95700,216.63200,303.87900,219.64700);c.lineTo(320.09799,219.64700);c.lineTo(320.09799,222.29500);c.bezierCurveTo(320.09799,224.01401,319.86801,225.58000,319.40701,226.99400);c.bezierCurveTo(319.40701,226.99400,318.28601,229.61900,317.42700,230.62700);c.bezierCurveTo(317.42700,230.62700,315.52100,232.41600,314.28601,232.97099);c.bezierCurveTo(314.28601,232.97099,311.66101,233.80299,310.11401,233.80299);c.bezierCurveTo(308.53601,233.80299,307.09399,233.49800,305.79001,232.88901);c.bezierCurveTo(305.79001,232.88901,303.36401,231.39301,302.42700,230.22900);c.bezierCurveTo(302.42700,230.22900,300.76300,227.64700,300.24701,225.97501);c.bezierCurveTo(300.24701,225.97501,299.47400,222.40500,299.47400,220.28000);c.bezierCurveTo(299.47400,218.17101,299.75500,216.29601,300.31799,214.65500);c.bezierCurveTo(300.31799,214.65500,301.67300,211.63901,302.69699,210.53000);c.bezierCurveTo(302.69699,210.53000,304.94299,208.57700,306.36499,207.99899);c.bezierCurveTo(306.36499,207.99899,309.35699,207.13200,311.07599,207.13200);c.bezierCurveTo(311.87100,207.13100,312.60901,207.16200,313.28900,207.22501);c.closePath();c.moveTo(312.50400,229.74800);c.bezierCurveTo(313.19199,229.40401,313.75800,228.92000,314.20300,228.29500);c.bezierCurveTo(314.20300,228.29500,314.97601,226.91600,315.18701,226.03300);c.bezierCurveTo(315.18701,226.03300,315.50299,224.17799,315.50299,223.11501);c.lineTo(303.97198,223.11501);c.bezierCurveTo(304.14401,225.44299,304.74899,227.21700,305.78799,228.43500);c.bezierCurveTo(305.78799,228.43500,308.23700,230.26300,310.01801,230.26300);c.bezierCurveTo(310.98801,230.26401,311.81601,230.09200,312.50400,229.74800);c.closePath();c.fill();c.stroke();c.beginPath();c.moveTo(342.90201,220.88901);c.lineTo(343.27701,227.33400);c.lineTo(343.27701,244.06799);c.lineTo(339.05801,244.06799);c.lineTo(339.05801,207.60001);c.lineTo(343.27701,207.60001);c.lineTo(343.27701,217.49100);c.lineTo(345.83200,219.41299);c.lineTo(353.70700,207.60100);c.lineTo(358.60501,207.60100);c.lineTo(348.57401,222.20300);c.lineTo(357.97198,233.33600);c.lineTo(353.02701,233.33600);c.lineTo(346.16000,224.87500);c.lineTo(342.99600,220.89101);c.lineTo(342.90201,220.89101);c.closePath();c.fill();c.stroke();c.beginPath();c.moveTo(375.25800,207.22501);c.bezierCurveTo(375.93799,207.28700,376.59399,207.38901,377.22699,207.53000);c.bezierCurveTo(377.22699,207.53000,378.47699,207.85001,379.07901,208.06900);c.bezierCurveTo(379.07901,208.06900,380.29401,208.54601,380.91901,208.84200);c.lineTo(380.91901,212.63901);c.bezierCurveTo(380.31000,212.35800,379.70801,212.10400,379.11401,211.87700);c.bezierCurveTo(379.11401,211.87700,377.90701,211.46300,377.27399,211.31500);c.bezierCurveTo(377.27399,211.31500,375.98499,211.05299,375.30499,210.97501);c.bezierCurveTo(375.30499,210.97501,373.88699,210.85800,373.09000,210.85800);c.bezierCurveTo(370.73099,210.85800,368.95300,211.56900,367.75800,212.99100);c.bezierCurveTo(367.75800,212.99100,365.92599,216.63200,365.84799,219.64700);c.lineTo(382.06699,219.64700);c.lineTo(382.06699,222.29500);c.bezierCurveTo(382.06699,224.01401,381.83701,225.58000,381.37601,226.99400);c.bezierCurveTo(381.37601,226.99400,380.25500,229.61900,379.39600,230.62700);c.bezierCurveTo(379.39600,230.62700,377.48999,232.41600,376.25500,232.97099);c.bezierCurveTo(376.25500,232.97099,373.63000,233.80299,372.08301,233.80299);c.bezierCurveTo(370.50500,233.80299,369.06299,233.49800,367.75900,232.88901);c.bezierCurveTo(367.75900,232.88901,365.33301,231.39301,364.39600,230.22900);c.bezierCurveTo(364.39600,230.22900,362.73199,227.64700,362.21600,225.97501);c.bezierCurveTo(362.21600,225.97501,361.44299,222.40500,361.44299,220.28000);c.bezierCurveTo(361.44299,218.17101,361.72400,216.29601,362.28699,214.65500);c.bezierCurveTo(362.28699,214.65500,363.64200,211.63901,364.66599,210.53000);c.bezierCurveTo(364.66599,210.53000,366.91199,208.57700,368.33401,207.99899);c.bezierCurveTo(368.33401,207.99899,371.32599,207.13200,373.04501,207.13200);c.bezierCurveTo(373.84000,207.13100,374.57800,207.16200,375.25800,207.22501);c.closePath();c.moveTo(374.47299,229.74800);c.bezierCurveTo(375.16101,229.40401,375.72699,228.92000,376.17200,228.29500);c.bezierCurveTo(376.17200,228.29500,376.94501,226.91600,377.15601,226.03300);c.bezierCurveTo(377.15601,226.03300,377.47198,224.17799,377.47198,223.11501);c.lineTo(365.94101,223.11501);c.bezierCurveTo(366.11301,225.44299,366.71799,227.21700,367.75699,228.43500);c.bezierCurveTo(367.75699,228.43500,370.20599,230.26300,371.98700,230.26300);c.bezierCurveTo(372.95700,230.26401,373.78500,230.09200,374.47299,229.74800);c.closePath();c.fill();c.stroke();c.beginPath();c.moveTo(394.46500,207.36501);c.lineTo(393.12900,203.61501);c.bezierCurveTo(392.89499,202.97400,392.63300,202.40401,392.34399,201.90401);c.bezierCurveTo(392.34399,201.90401,391.70700,200.98199,391.30099,200.63800);c.bezierCurveTo(391.30099,200.63800,390.41800,200.03300,389.87100,199.85300);c.bezierCurveTo(389.87100,199.85300,388.67599,199.58299,387.92599,199.58299);c.bezierCurveTo(387.37900,199.58299,386.85599,199.61000,386.35599,199.66499);c.bezierCurveTo(386.35599,199.66499,385.44199,199.78600,385.11401,199.86400);c.lineTo(385.11401,196.46600);c.bezierCurveTo(385.53601,196.37199,386.04401,196.28200,386.63699,196.19600);c.bezierCurveTo(386.63699,196.19600,387.93399,196.06700,388.74600,196.06700);c.bezierCurveTo(389.99600,196.06700,391.07401,196.25800,391.98001,196.64101);c.bezierCurveTo(391.98001,196.64101,393.67499,197.56700,394.34698,198.27000);c.bezierCurveTo(394.34698,198.27000,395.60901,199.82899,396.11700,200.83600);c.bezierCurveTo(396.11700,200.83600,397.09698,202.98100,397.53500,204.24600);c.lineTo(407.70700,233.33200);c.lineTo(403.30099,233.33200);c.lineTo(398.63699,219.01199);c.bezierCurveTo(398.46500,218.49600,398.26599,217.87100,398.03900,217.13699);c.bezierCurveTo(398.03900,217.13699,397.59399,215.65700,397.38300,214.89900);c.bezierCurveTo(397.38300,214.89900,396.98099,213.42599,396.80899,212.75400);c.bezierCurveTo(396.80899,212.75400,396.51199,211.55099,396.43399,211.16000);c.lineTo(396.29300,211.16000);c.bezierCurveTo(396.23099,211.70700,396.12900,212.30099,395.98801,212.94099);c.bezierCurveTo(395.98801,212.94099,395.67899,214.24600,395.48401,214.93300);c.bezierCurveTo(395.48401,214.93300,395.07800,216.30800,394.85101,216.99500);c.bezierCurveTo(394.85101,216.99500,394.40201,218.33900,394.18301,218.96400);c.lineTo(389.14401,233.33099);c.lineTo(384.71399,233.33099);c.lineTo(394.46500,207.36501);c.closePath();c.fill();c.stroke();c.beginPath();c.moveTo(432.36301,207.60001);c.lineTo(432.36301,224.40500);c.bezierCurveTo(432.36301,227.68600,431.64001,230.07300,430.19501,231.56500);c.bezierCurveTo(430.19501,231.56500,426.59698,233.80299,423.73801,233.80299);c.bezierCurveTo(422.98801,233.80299,422.25400,233.72501,421.53500,233.56900);c.bezierCurveTo(421.53500,233.56900,420.13699,233.17101,419.49600,232.84200);c.bezierCurveTo(419.49600,232.84200,418.26599,232.10400,417.72601,231.61200);c.bezierCurveTo(417.72601,231.61200,416.72198,230.53799,416.33099,229.86600);c.lineTo(416.09698,229.86600);c.lineTo(415.48801,233.33501);c.lineTo(412.01901,233.33501);c.lineTo(412.01901,207.60001);c.lineTo(416.28500,207.60001);c.lineTo(416.28500,220.93600);c.bezierCurveTo(416.28500,222.43600,416.39801,223.76401,416.62500,224.92000);c.bezierCurveTo(416.62500,224.92000,417.22699,227.05299,417.75000,227.85001);c.bezierCurveTo(417.75000,227.85001,418.96500,229.24800,419.82401,229.65500);c.bezierCurveTo(419.82401,229.65500,421.74600,230.26401,423.01199,230.26401);c.bezierCurveTo(424.76199,230.26401,426.04700,229.75600,426.86700,228.74100);c.bezierCurveTo(426.86700,228.74100,428.09698,226.20200,428.09698,224.17101);c.lineTo(428.09698,207.60001);c.lineTo(432.36301,207.60001);c.closePath();c.fill();c.stroke();c.beginPath();c.moveTo(460.42999,226.17400);c.bezierCurveTo(459.87500,227.82201,459.10199,229.21300,458.10999,230.34599);c.bezierCurveTo(458.10999,230.34599,455.94199,232.33800,454.58301,232.92400);c.bezierCurveTo(454.58301,232.92400,451.73901,233.80299,450.13000,233.80299);c.bezierCurveTo(448.39600,233.80299,446.82901,233.50999,445.43100,232.92400);c.bezierCurveTo(445.43100,232.92400,442.84900,231.47900,441.88000,230.34599);c.bezierCurveTo(441.88000,230.34599,440.16501,227.82300,439.64200,226.17400);c.bezierCurveTo(439.64200,226.17400,438.85699,222.63901,438.85699,220.51401);c.bezierCurveTo(438.85699,218.37300,439.13400,216.47099,439.68900,214.80701);c.bezierCurveTo(439.68900,214.80701,441.01700,211.74500,442.00900,210.61200);c.bezierCurveTo(442.00900,210.61200,444.17700,208.61600,445.53601,208.02200);c.bezierCurveTo(445.53601,208.02200,448.38000,207.13100,449.98901,207.13100);c.bezierCurveTo(451.72299,207.13100,453.28601,207.42799,454.67700,208.02200);c.bezierCurveTo(454.67700,208.02200,457.25101,209.47900,458.22800,210.61200);c.bezierCurveTo(458.22800,210.61200,459.95499,213.14301,460.47800,214.80701);c.bezierCurveTo(460.47800,214.80701,461.26300,218.37300,461.26300,220.51401);c.bezierCurveTo(461.26199,222.63901,460.98401,224.52499,460.42999,226.17400);c.closePath();c.moveTo(444.84399,227.83800);c.bezierCurveTo(445.89899,229.45500,447.62900,230.26401,450.03500,230.26401);c.bezierCurveTo(450.03500,230.26401,454.17999,229.45500,455.25000,227.83800);c.bezierCurveTo(455.25000,227.83800,456.85501,223.77901,456.85501,220.51401);c.bezierCurveTo(456.85501,220.51401,456.32800,214.79100,455.27301,213.14301);c.bezierCurveTo(455.27301,213.14301,452.48801,210.67000,450.08200,210.67000);c.bezierCurveTo(450.08200,210.67000,445.93701,211.49400,444.86700,213.14301);c.bezierCurveTo(444.86700,213.14301,443.26199,217.24800,443.26199,220.51401);c.bezierCurveTo(443.26199,220.51401,443.78900,226.22099,444.84399,227.83800);c.closePath();c.fill();c.stroke();c.beginPath();c.moveTo(473.34399,211.77100);c.bezierCurveTo(472.85199,212.53700,472.60599,213.67700,472.60599,215.19299);c.lineTo(472.60599,230.12300);c.lineTo(479.07501,230.12300);c.lineTo(479.07501,233.33400);c.lineTo(472.60599,233.33400);c.lineTo(472.60599,239.24001);c.lineTo(470.14499,239.24001);c.lineTo(468.31699,233.84900);c.lineTo(464.68399,232.02100);c.lineTo(464.68399,230.12300);c.lineTo(468.31699,230.12300);c.lineTo(468.31699,215.19299);c.bezierCurveTo(468.31699,213.61501,468.48901,212.30600,468.83301,211.26700);c.bezierCurveTo(468.83301,211.26700,469.64899,209.40401,470.25101,208.79401);c.bezierCurveTo(470.25101,208.79401,471.56699,207.75500,472.39600,207.50500);c.bezierCurveTo(472.39600,207.50500,474.12299,207.13000,475.09100,207.13000);c.bezierCurveTo(475.48199,207.13000,475.88000,207.14999,476.28601,207.18900);c.bezierCurveTo(476.28601,207.18900,477.08301,207.28300,477.45801,207.35300);c.bezierCurveTo(477.45801,207.35300,478.17700,207.50500,478.48901,207.59900);c.bezierCurveTo(478.48901,207.59900,479.05899,207.78700,479.26199,207.88000);c.lineTo(479.26199,211.11400);c.bezierCurveTo(479.12100,211.06700,478.91400,211.01199,478.64099,210.95000);c.bezierCurveTo(478.64099,210.95000,478.06699,210.83299,477.73901,210.78600);c.bezierCurveTo(477.73901,210.78600,477.07101,210.70000,476.71899,210.66901);c.bezierCurveTo(476.71899,210.66901,476.05099,210.62199,475.76999,210.62199);c.bezierCurveTo(474.64499,210.62300,473.83600,211.00600,473.34399,211.77100);c.closePath();c.fill();c.stroke();c.beginPath();c.moveTo(496.64099,207.22501);c.bezierCurveTo(497.32101,207.28700,497.97699,207.38901,498.60999,207.53000);c.bezierCurveTo(498.60999,207.53000,499.85999,207.85001,500.46201,208.06900);c.bezierCurveTo(500.46201,208.06900,501.67700,208.54601,502.30200,208.84200);c.lineTo(502.30200,212.63901);c.bezierCurveTo(501.69299,212.35800,501.09100,212.10400,500.49701,211.87700);c.bezierCurveTo(500.49701,211.87700,499.29001,211.46300,498.65701,211.31500);c.bezierCurveTo(498.65701,211.31500,497.36801,211.05299,496.68799,210.97501);c.bezierCurveTo(496.68799,210.97501,495.26999,210.85800,494.47299,210.85800);c.bezierCurveTo(492.11401,210.85800,490.33600,211.56900,489.14099,212.99100);c.bezierCurveTo(489.14099,212.99100,487.30899,216.63200,487.23099,219.64700);c.lineTo(503.45001,219.64700);c.lineTo(503.45001,222.29500);c.bezierCurveTo(503.45001,224.01401,503.22000,225.58000,502.75900,226.99400);c.bezierCurveTo(502.75900,226.99400,501.63800,229.61900,500.77899,230.62700);c.bezierCurveTo(500.77899,230.62700,498.87299,232.41600,497.63800,232.97099);c.bezierCurveTo(497.63800,232.97099,495.01300,233.80299,493.46600,233.80299);c.bezierCurveTo(491.88800,233.80299,490.44601,233.49800,489.14200,232.88901);c.bezierCurveTo(489.14200,232.88901,486.71600,231.39301,485.77899,230.22900);c.bezierCurveTo(485.77899,230.22900,484.11499,227.64700,483.59900,225.97501);c.bezierCurveTo(483.59900,225.97501,482.82599,222.40500,482.82599,220.28000);c.bezierCurveTo(482.82599,218.17101,483.10699,216.29601,483.67001,214.65500);c.bezierCurveTo(483.67001,214.65500,485.02499,211.63901,486.04901,210.53000);c.bezierCurveTo(486.04901,210.53000,488.29501,208.57700,489.71701,207.99899);c.bezierCurveTo(489.71701,207.99899,492.70901,207.13200,494.42801,207.13200);c.bezierCurveTo(495.22299,207.13100,495.96100,207.16200,496.64099,207.22501);c.closePath();c.moveTo(495.85501,229.74800);c.bezierCurveTo(496.54300,229.40401,497.10901,228.92000,497.55399,228.29500);c.bezierCurveTo(497.55399,228.29500,498.32700,226.91600,498.53799,226.03300);c.bezierCurveTo(498.53799,226.03300,498.85400,224.17799,498.85400,223.11501);c.lineTo(487.32300,223.11501);c.bezierCurveTo(487.49500,225.44299,488.10001,227.21700,489.13901,228.43500);c.bezierCurveTo(489.13901,228.43500,491.58801,230.26300,493.36899,230.26300);c.bezierCurveTo(494.34000,230.26401,495.16800,230.09200,495.85501,229.74800);c.closePath();c.fill();c.stroke();c.beginPath();c.moveTo(210.62100,150.00000);c.lineTo(210.62100,167.62500);c.bezierCurveTo(210.62100,169.15601,210.43300,170.46100,210.05901,171.53900);c.bezierCurveTo(210.05901,171.53900,209.11800,173.50400,208.36000,174.19901);c.bezierCurveTo(208.36000,174.19901,206.64101,175.40199,205.47701,175.72200);c.bezierCurveTo(205.47701,175.72200,202.93401,176.20200,201.34000,176.20200);c.bezierCurveTo(199.77800,176.20200,198.28500,175.98300,196.86301,175.54601);c.bezierCurveTo(196.86301,175.54601,194.15199,174.57700,192.99600,173.95200);c.lineTo(194.49600,170.74100);c.bezierCurveTo(195.52699,171.27200,196.60100,171.72501,197.71899,172.10001);c.bezierCurveTo(197.71899,172.10001,200.04300,172.66200,201.34000,172.66200);c.bezierCurveTo(202.15199,172.66200,202.87500,172.56799,203.50800,172.38100);c.bezierCurveTo(203.50800,172.38100,204.67200,171.88499,205.10201,171.45500);c.bezierCurveTo(205.10201,171.45500,205.86000,170.45900,206.08600,169.75600);c.bezierCurveTo(206.08600,169.75600,206.42599,168.17799,206.42599,167.13100);c.lineTo(206.42599,165.51401);c.lineTo(202.11400,165.35001);c.bezierCurveTo(198.42599,165.22501,195.67999,164.47501,193.87601,163.10001);c.bezierCurveTo(193.87601,163.10001,191.16901,159.75600,191.16901,157.19400);c.bezierCurveTo(191.16901,155.88200,191.35699,154.74500,191.73100,153.78400);c.bezierCurveTo(191.73100,153.78400,192.62601,152.02600,193.28999,151.39301);c.bezierCurveTo(193.28999,151.39301,194.73900,150.29100,195.64500,149.98700);c.bezierCurveTo(195.64500,149.98700,197.54300,149.53000,198.62199,149.53000);c.bezierCurveTo(199.60600,149.53000,200.47400,149.60800,201.22400,149.76401);c.bezierCurveTo(201.22400,149.76401,202.65401,150.16200,203.26300,150.49100);c.bezierCurveTo(203.26300,150.49100,204.43500,151.23700,204.95100,151.74500);c.bezierCurveTo(204.95100,151.74500,205.98199,152.85800,206.49800,153.56100);c.lineTo(206.68600,153.56100);c.lineTo(207.55299,149.99899);c.lineTo(210.62100,149.99899);c.closePath();c.moveTo(196.73399,153.98399);c.bezierCurveTo(195.97600,154.65601,195.59700,155.71100,195.59700,157.14799);c.bezierCurveTo(195.59700,157.94501,195.72200,158.66000,195.97200,159.29300);c.bezierCurveTo(195.97200,159.29300,196.63200,160.46500,197.20200,160.91000);c.bezierCurveTo(197.20200,160.91000,198.53400,161.70300,199.48700,161.95300);c.bezierCurveTo(199.48700,161.95300,201.62000,162.35899,203.02600,162.42200);c.lineTo(206.37801,162.58600);c.lineTo(206.37801,160.26601);c.bezierCurveTo(206.37801,159.03200,206.21001,157.95700,205.87399,157.04300);c.bezierCurveTo(205.87399,157.04300,205.07300,155.37100,204.47900,154.77000);c.bezierCurveTo(204.47900,154.77000,203.18201,153.71899,202.37000,153.42200);c.bezierCurveTo(202.37000,153.42200,200.67500,152.97701,199.72200,152.97701);c.bezierCurveTo(198.48801,152.97701,197.49200,153.31200,196.73399,153.98399);c.closePath();c.fill();c.stroke();c.beginPath();c.moveTo(223.87500,154.17200);c.bezierCurveTo(223.38300,154.93800,223.13699,156.07800,223.13699,157.59399);c.lineTo(223.13699,172.52400);c.lineTo(229.60600,172.52400);c.lineTo(229.60600,175.73500);c.lineTo(223.13699,175.73500);c.lineTo(223.13699,181.64101);c.lineTo(220.67599,181.64101);c.lineTo(218.84801,176.25000);c.lineTo(215.21500,174.42200);c.lineTo(215.21500,172.52400);c.lineTo(218.84801,172.52400);c.lineTo(218.84801,157.59399);c.bezierCurveTo(218.84801,156.01601,219.02000,154.70700,219.36400,153.66800);c.bezierCurveTo(219.36400,153.66800,220.17999,151.80499,220.78200,151.19501);c.bezierCurveTo(220.78200,151.19501,222.09801,150.15601,222.92700,149.90601);c.bezierCurveTo(222.92700,149.90601,224.65401,149.53101,225.62199,149.53101);c.bezierCurveTo(226.01300,149.53101,226.41100,149.55099,226.81700,149.59000);c.bezierCurveTo(226.81700,149.59000,227.61400,149.68401,227.98900,149.75400);c.bezierCurveTo(227.98900,149.75400,228.70799,149.90601,229.02000,150.00000);c.bezierCurveTo(229.02000,150.00000,229.59000,150.18800,229.79300,150.28101);c.lineTo(229.79300,153.51500);c.bezierCurveTo(229.65199,153.46800,229.44501,153.41299,229.17200,153.35100);c.bezierCurveTo(229.17200,153.35100,228.59801,153.23399,228.27000,153.18700);c.bezierCurveTo(228.27000,153.18700,227.60201,153.10100,227.25000,153.07001);c.bezierCurveTo(227.25000,153.07001,226.58200,153.02299,226.30099,153.02299);c.bezierCurveTo(225.17599,153.02299,224.36700,153.40601,223.87500,154.17200);c.closePath();c.fill();c.stroke();c.beginPath();c.moveTo(257.51999,152.39101);c.lineTo(253.48900,153.35201);c.lineTo(253.48900,180.91400);c.lineTo(257.51999,181.87500);c.lineTo(257.51999,184.26601);c.lineTo(245.09801,184.26601);c.lineTo(245.09801,181.87500);c.lineTo(249.12900,180.91400);c.lineTo(249.12900,153.35201);c.lineTo(245.09801,152.39101);c.lineTo(245.09801,150.00000);c.lineTo(257.51999,150.00000);c.lineTo(257.51999,152.39101);c.closePath();c.fill();c.stroke();c.beginPath();c.moveTo(272.68399,184.26601);c.lineTo(259.91000,150.00000);c.lineTo(264.10501,150.00000);c.lineTo(276.85501,184.26601);c.lineTo(272.68399,184.26601);c.closePath();c.fill();c.stroke();c.beginPath();c.moveTo(309.04700,174.43401);c.bezierCurveTo(308.41400,176.59801,307.47299,178.45000,306.22299,179.98900);c.bezierCurveTo(306.22299,179.98900,303.42999,182.71600,301.59399,183.55099);c.bezierCurveTo(301.59399,183.55099,297.62900,184.80499,295.20700,184.80499);c.bezierCurveTo(292.66000,184.80499,290.44901,184.38699,288.57401,183.55099);c.bezierCurveTo(288.57401,183.55099,285.14401,181.53101,283.91000,180.00000);c.bezierCurveTo(283.91000,180.00000,281.76199,176.62100,281.16800,174.45700);c.bezierCurveTo(281.16800,174.45700,280.27701,169.88300,280.27701,167.22701);c.bezierCurveTo(280.27701,167.22701,280.57401,162.15300,281.16800,159.97301);c.bezierCurveTo(281.16800,159.97301,282.67200,155.92999,283.89801,154.38300);c.bezierCurveTo(283.89801,154.38300,286.67099,151.64101,288.53900,150.79700);c.bezierCurveTo(288.53900,150.79700,292.61301,149.53101,295.16000,149.53101);c.bezierCurveTo(297.58200,149.53101,299.71899,149.95300,301.57001,150.79700);c.bezierCurveTo(301.57001,150.79700,304.97198,152.83600,306.22198,154.38300);c.bezierCurveTo(306.22198,154.38300,308.41299,157.78900,309.04599,159.96100);c.bezierCurveTo(309.04599,159.96100,309.99500,164.53900,309.99500,167.17999);c.bezierCurveTo(309.99600,169.85201,309.67999,172.27000,309.04700,174.43401);c.closePath();c.moveTo(285.50400,172.96899);c.bezierCurveTo(285.91000,174.67200,286.53500,176.11400,287.37900,177.29300);c.bezierCurveTo(287.37900,177.29300,289.29300,179.37900,290.59000,180.01199);c.bezierCurveTo(290.59000,180.01199,293.42599,180.96100,295.20700,180.96100);c.bezierCurveTo(295.20700,180.96100,298.51901,180.64500,299.80099,180.01199);c.bezierCurveTo(299.80099,180.01199,302.13699,178.47301,302.96500,177.29300);c.bezierCurveTo(302.96500,177.29300,304.40302,174.67200,304.79300,172.96899);c.bezierCurveTo(304.79300,172.96899,305.37900,169.33600,305.37900,167.17999);c.bezierCurveTo(305.37900,165.03900,305.18399,163.11400,304.79300,161.40300);c.bezierCurveTo(304.79300,161.40300,303.78900,158.23900,302.95300,157.04401);c.bezierCurveTo(302.95300,157.04401,301.05499,154.93500,299.76501,154.30200);c.bezierCurveTo(299.76501,154.30200,296.94101,153.35300,295.16000,153.35300);c.bezierCurveTo(295.16000,153.35300,291.84399,153.66901,290.55499,154.30200);c.bezierCurveTo(290.55499,154.30200,288.20300,155.84900,287.36700,157.04401);c.bezierCurveTo(287.36700,157.04401,285.91000,159.69200,285.50400,161.40300);c.bezierCurveTo(285.50400,161.40300,284.89499,165.03999,284.89499,167.17999);c.bezierCurveTo(284.89499,169.33600,285.09799,171.26601,285.50400,172.96899);c.closePath();c.fill();c.stroke();c.beginPath();c.moveTo(347.89499,150.00000);c.lineTo(347.89499,153.89101);c.lineTo(334.46500,153.89101);c.lineTo(334.46500,184.26601);c.lineTo(330.10599,184.26601);c.lineTo(330.10599,150.00000);c.lineTo(347.89499,150.00000);c.closePath();c.fill();c.stroke();c.beginPath();c.moveTo(353.48401,180.65601);c.bezierCurveTo(353.96100,180.21800,354.54999,180.00000,355.25400,180.00000);c.bezierCurveTo(355.94199,180.00000,356.53101,180.22301,357.02399,180.66800);c.bezierCurveTo(357.02399,180.66800,357.76199,181.78900,357.76199,182.69501);c.bezierCurveTo(357.76199,183.16400,357.69601,183.56599,357.56299,183.90199);c.bezierCurveTo(357.56299,183.90199,357.25101,184.51500,357.02399,184.73399);c.bezierCurveTo(357.02399,184.73399,356.53201,185.11301,356.22699,185.21400);c.bezierCurveTo(356.22699,185.21400,355.59799,185.36600,355.25400,185.36600);c.bezierCurveTo(354.55099,185.36600,353.96100,185.15500,353.48401,184.73300);c.bezierCurveTo(353.48401,184.73300,352.76901,183.63100,352.76901,182.69400);c.bezierCurveTo(352.76999,181.77299,353.00800,181.09399,353.48401,180.65601);c.closePath();c.moveTo(357.36301,175.73399);c.lineTo(353.09698,175.73399);c.lineTo(353.09698,150.00000);c.lineTo(357.36301,150.00000);c.lineTo(357.36301,175.73399);c.closePath();c.fill();c.stroke();c.beginPath();c.moveTo(375.64499,150.00000);c.lineTo(384.43399,175.73399);c.lineTo(380.02802,175.73399);c.lineTo(375.36401,161.41400);c.bezierCurveTo(375.19199,160.89799,374.98901,160.23399,374.75500,159.42200);c.bezierCurveTo(374.75500,159.42200,374.28601,157.78101,374.05200,156.93800);c.bezierCurveTo(374.05200,156.93800,373.60699,155.29700,373.41901,154.54700);c.bezierCurveTo(373.41901,154.54700,373.09900,153.22701,373.02100,152.83600);c.lineTo(372.85699,152.83600);c.bezierCurveTo(372.79501,153.22701,372.66599,153.79700,372.47000,154.54700);c.bezierCurveTo(372.47000,154.54700,372.06000,156.09399,371.82501,156.93800);c.bezierCurveTo(371.82501,156.93800,371.35599,158.61000,371.12201,159.42200);c.bezierCurveTo(371.12201,159.42200,370.68399,160.89900,370.51300,161.41400);c.lineTo(365.84900,175.73399);c.lineTo(361.44299,175.73399);c.lineTo(370.23001,150.00000);c.lineTo(375.64499,150.00000);c.closePath();c.fill();c.stroke();c.beginPath();c.moveTo(400.89801,149.62500);c.bezierCurveTo(401.57800,149.68700,402.23401,149.78900,402.86700,149.92999);c.bezierCurveTo(402.86700,149.92999,404.11700,150.25000,404.71899,150.46899);c.bezierCurveTo(404.71899,150.46899,405.93399,150.94600,406.55899,151.24200);c.lineTo(406.55899,155.03900);c.bezierCurveTo(405.95001,154.75800,405.34799,154.50400,404.75400,154.27699);c.bezierCurveTo(404.75400,154.27699,403.54700,153.86301,402.91400,153.71500);c.bezierCurveTo(402.91400,153.71500,401.62500,153.45300,400.94501,153.37500);c.bezierCurveTo(400.94501,153.37500,399.52701,153.25800,398.73001,153.25800);c.bezierCurveTo(396.37100,153.25800,394.59299,153.96899,393.39801,155.39101);c.bezierCurveTo(393.39801,155.39101,391.56601,159.03200,391.48801,162.04700);c.lineTo(407.70700,162.04700);c.lineTo(407.70700,164.69501);c.bezierCurveTo(407.70700,166.41400,407.47699,167.98000,407.01599,169.39400);c.bezierCurveTo(407.01599,169.39400,405.89499,172.01900,405.03601,173.02699);c.bezierCurveTo(405.03601,173.02699,403.13000,174.81599,401.89499,175.37100);c.bezierCurveTo(401.89499,175.37100,399.26999,176.20300,397.72299,176.20300);c.bezierCurveTo(396.14499,176.20300,394.70300,175.89799,393.39899,175.28900);c.bezierCurveTo(393.39899,175.28900,390.97299,173.79300,390.03601,172.62900);c.bezierCurveTo(390.03601,172.62900,388.37201,170.04700,387.85599,168.37500);c.bezierCurveTo(387.85599,168.37500,387.08301,164.80499,387.08301,162.67999);c.bezierCurveTo(387.08301,160.57100,387.36401,158.69600,387.92700,157.05499);c.bezierCurveTo(387.92700,157.05499,389.28201,154.03900,390.30600,152.92999);c.bezierCurveTo(390.30600,152.92999,392.55200,150.97701,393.97400,150.39900);c.bezierCurveTo(393.97400,150.39900,396.96600,149.53200,398.68500,149.53200);c.bezierCurveTo(399.48001,149.53101,400.21899,149.56200,400.89801,149.62500);c.closePath();c.moveTo(400.11301,172.14799);c.bezierCurveTo(400.80099,171.80400,401.36700,171.32001,401.81201,170.69501);c.bezierCurveTo(401.81201,170.69501,402.58499,169.31599,402.79599,168.43300);c.bezierCurveTo(402.79599,168.43300,403.11200,166.57800,403.11200,165.51500);c.lineTo(391.58099,165.51500);c.bezierCurveTo(391.75299,167.84300,392.35800,169.61700,393.39700,170.83501);c.bezierCurveTo(393.39700,170.83501,395.84601,172.66299,397.62701,172.66299);c.bezierCurveTo(398.59799,172.66400,399.42599,172.49200,400.11301,172.14799);c.closePath();c.fill();c.stroke();c.beginPath();c.moveTo(413.80099,151.11301);c.bezierCurveTo(413.95700,150.69901,414.16800,150.35899,414.43399,150.09300);c.bezierCurveTo(414.43399,150.09300,415.01199,149.63200,415.37201,149.50700);c.bezierCurveTo(415.37201,149.50700,416.12201,149.31900,416.54401,149.31900);c.bezierCurveTo(416.95001,149.31900,417.33701,149.38100,417.70401,149.50700);c.bezierCurveTo(417.70401,149.50700,418.38800,149.82700,418.65302,150.09300);c.bezierCurveTo(418.65302,150.09300,419.13000,150.69800,419.28601,151.11301);c.bezierCurveTo(419.28601,151.11301,419.51999,152.02299,419.51999,152.60100);c.bezierCurveTo(419.51999,153.19501,419.44199,153.69901,419.28601,154.11301);c.bezierCurveTo(419.28601,154.11301,418.91901,154.86301,418.65302,155.12100);c.bezierCurveTo(418.65302,155.12100,418.07101,155.56599,417.70401,155.68300);c.bezierCurveTo(417.70401,155.68300,416.95001,155.85899,416.54401,155.85899);c.bezierCurveTo(416.12201,155.85899,415.73199,155.80000,415.37201,155.68300);c.bezierCurveTo(415.37201,155.68300,414.70001,155.37801,414.43399,155.12100);c.bezierCurveTo(414.43399,155.12100,413.95700,154.52699,413.80099,154.11301);c.bezierCurveTo(413.80099,154.11301,413.56699,153.19501,413.56699,152.60100);c.bezierCurveTo(413.56601,152.02299,413.64499,151.52699,413.80099,151.11301);c.closePath();c.moveTo(419.19101,184.26601);c.lineTo(413.96399,184.26601);c.lineTo(415.15900,159.70399);c.lineTo(417.99500,159.70399);c.lineTo(419.19101,184.26601);c.closePath();c.fill();c.stroke();c.restore();
      */
	  };
      var group = new THREE.Object3D();
      var m = new THREE.ParticleCanvasMaterial({
        color: colors[0],
        program: prog
      });
      m.alpha = {v: 0.0};
      var p = new THREE.Particle(m);
      group.position.x = -320;
      group.position.y = -355;
      group.position.z = 2000;
      group.scale.x = group.scale.y = 1.2;
      group.addChild(p);
      scene.addChild(group);
      document.removeEventListener('click', onDocumentClick);
      document.body.style.cursor = 'pointer';
      document.body.addEventListener('click', function(e) {
        if ($(e.target).attr('id') != 'countdown-watch-again') {
          window.location = '#';
        }
      }, false);
      positionAdjustment = .005;
      mouseAdjustment = 2;
      new TWEEN.Tween(camera.position)
        .to({x: 0, y: 0, z: 700}, 1000).easing(TWEEN.Easing.Circular.EaseOut).start();
      new TWEEN.Tween(group.position)
        .to({z: 200}, 2000).easing(TWEEN.Easing.Circular.EaseOut).start();
      var again = $('body').prepend('<div id="countdown-watch-again">' +
                                    '<img src="http://www.google.com/images/icons/product/chrome-42.png">' +
                                    '<a href="#">Watch the experiment ' +
                                    'again</a></div>');
      $('#countdown-watch-again a').bind('click', function() {
        window.location.hash = '#again';
        window.location.reload(true);
        return false;
      });
      $('#countdown-watch-again').fadeIn('fast');
    }
  }

  /**
   * Set up the DOM container that will hold the Three.js scene, then initialize
   * the Three.js camera, scene and renderer. Also sets up event listeners for
   * mouse movement and keystrokes.
   * Finally fires off animate to star the loop.
   */
  function init() {

    /**
     * Set the container to fill the window.
     */
    container = document.createElement('div');
    container.style.position = 'absolute';
    container.style.top = '0';
    container.style.left = '0';
    container.style.bottom = '0';
    container.style.right = '0';
    container.style.zIndex = '9999';
    document.body.appendChild(container);

    /**
     * Set up the camera.
     */
    camera = new THREE.Camera(75, window.innerWidth / window.innerHeight,
                              0, 2000);
    camera.position.z = 700;

    /**
     * Create the new scene.
     */
    scene = new THREE.Scene();

    /**
     * Fire off the first entity.
     */
    showEntity();

    /**
     * Set up the renderer.
     */
    renderer = new THREE.CanvasRenderer();
    renderer.setSize(window.innerWidth, window.innerHeight);

    /**
     * Uncomment to show framerate stats.
     */
    if (window.Stats) {
      stats = new Stats();
      stats.domElement.style.position = 'absolute';
      stats.domElement.style.top = '0px';
      container.appendChild(stats.domElement);
    }

    /**
     * Add the canvas to the container generated by the renderer.
     */
    container.appendChild(renderer.domElement);

    document.addEventListener('mousemove', onDocumentMouseMove, false);
    document.addEventListener('keydown', onDocumentKeyDown, false);
    document.addEventListener('click', onDocumentClick, false);

    splodeEntity();

    /**
     * Fire off the animate loop.
     */
    animate();
  }

  return {
    init: init
  };

}());

countdownFinale.init();